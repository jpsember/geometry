#!/usr/bin/env ruby

require 'js_base'
require 'trollop'
require 'js_base/text_editor'

class ProgramException < Exception; end

class String
  def strip_heredoc
    gsub(/^#{scan(/^\s*/).min_by{|l|l.length}}/, "")
  end
end

class Commit

  PROJECT_NAME = "GeometryApp"
  DELETE_CRUNCH = true

  GIT_STATE_FILENAME = ".commit_state"
  GIT_MESSAGE_FILENAME = ".commit_git_message"
  COMMIT_MESSAGE_FILENAME = ".commit_editor_message"
  PREVIOUS_COMMIT_MESSAGE_FILENAME = ".commit_previous_editor_message"


  COMMIT_MESSAGE_TEMPLATE_1=<<-EOS.strip_heredoc
  Issue #

  # Enter a commit message above, including at least one issue number prefixed with '#'.
  # You can have GitHub close the issue automatically by referring to the issue with
  # one of these (case-insensitive) forms:
  #
  #  'fixes #123', 'resolves #123', 'closes #123'.
  #
  EOS

  COMMIT_MESSAGE_TEMPLATE_2=<<-EOS.strip_heredoc

  # --------------------------------------------------------------------------
  # Previous commit's message:
  # --------------------------------------------------------------------------
  EOS


  COMMIT_MESSAGE_TEMPLATE_3=<<-EOS.strip_heredoc

  # --------------------------------------------------------------------------
  # Git repository status:
  # --------------------------------------------------------------------------
  EOS

  def initialize
    @options = nil
  end

  def run(argv)

    @options = parse_arguments(argv)
    @detail = @options[:detail]
    @verbose = @options[:verbose] || @detail
    @current_git_state = nil
    @previous_git_state = nil
    @saved_directory = Dir.pwd

    begin

      passed_tests = false
      perform_tests = false
      examine_git_state = !@options[:testonly]
      if examine_git_state

        if !@options[:testonly]
          read_old_git_state
          determine_current_git_state

          if @current_git_state != @previous_git_state
            puts "...states differ, running unit tests" if @verbose
            perform_tests = true
          end
        end
      end

      if !@options[:omit_graphics]
        runcmd("rake")
      end

      perform_tests ||= @options[:testonly]
      perform_tests &&= !@options[:omit_tests]

      if perform_tests
        run_unit_tests
        if examine_git_state
          update_old_git_state
        end
      end
      passed_tests = true

      if !@options[:testonly] && commit_required
        perform_commit
      end

    rescue ProgramException => e
      puts "*** Aborted!  #{e.message}"
      exit 1
    ensure
      Dir.chdir(@saved_directory)
    end
  end

  def commit_required
    return !(@current_git_state.empty?)
  end

  def read_old_git_state
    if @options[:clean]
      remove(GIT_STATE_FILENAME)
    end
    @previous_git_state = FileUtils.read_text_file(GIT_STATE_FILENAME,"")
  end

  def determine_current_git_state

    # Use full diff to determine if previous results are still valid
    current_diff_state,_ = scall("git diff -p")

    # Use brief status to test for untracked files and to report to user
    state,_= scall("git status -s")

    @current_git_state = state + "\n" + current_diff_state

    if state.include?('??')
      state,_ = scall("git status")
      raise ProgramException,"Unexpected repository state:\n#{state}"
    end
  end

  def update_old_git_state
    FileUtils.write_text_file(GIT_STATE_FILENAME,@current_git_state)
  end


  def strip_comments_from_string(m)
    m = m.strip
    lines = m.split("\n").collect{|x| x.rstrip}
    lines = lines.keep_if{|x| !x.start_with?('#')}
    lines.join("\n")
  end

  def convert_string_to_comments(s)
    s.split("\n").collect{|x| "# #{x}"}.join("\n") + "\n"
  end

  def previous_commit_message
    return nil if !File.exist?(PREVIOUS_COMMIT_MESSAGE_FILENAME)
    s = FileUtils.read_text_file(PREVIOUS_COMMIT_MESSAGE_FILENAME,"")
    strip_comments_from_string(s)
  end

  def edit_commit_message
    if !File.exist?(COMMIT_MESSAGE_FILENAME)
      status,_ = scall("git status")
      status = convert_string_to_comments(status)
      prior_msg = previous_commit_message
      content = COMMIT_MESSAGE_TEMPLATE_1
      if prior_msg
        content += COMMIT_MESSAGE_TEMPLATE_2 + convert_string_to_comments(prior_msg)
      end
      content += COMMIT_MESSAGE_TEMPLATE_3 + status
      FileUtils.write_text_file(COMMIT_MESSAGE_FILENAME,content)
    end

    TextEditor.new(COMMIT_MESSAGE_FILENAME).edit

    m = FileUtils.read_text_file(COMMIT_MESSAGE_FILENAME)
    m = strip_comments_from_string(m)
    return nil if m.empty?
    m
  end


  def perform_commit
    m = edit_commit_message
    raise(ProgramException,"Commit message empty") if !m

    if !(m =~ /#\d+/)
      raise(ProgramException,"No issue numbers found in commit message")
    end

    FileUtils.write_text_file(GIT_MESSAGE_FILENAME,m)

    if system("git commit -a --file=#{GIT_MESSAGE_FILENAME}")
      remove(COMMIT_MESSAGE_FILENAME)
      remove(GIT_MESSAGE_FILENAME)
      remove(GIT_STATE_FILENAME)

      bare_message = strip_comments_from_string(m)
      FileUtils.write_text_file(PREVIOUS_COMMIT_MESSAGE_FILENAME,bare_message)

    else
      raise(ProgramException,"Git commit failed; error #{$?}")
    end
  end

  def parse_arguments(argv)
    p = Trollop::Parser.new do
      banner <<-EOS
      Runs unit tests, generates commit for this Android project
      EOS
      opt :clean, "clean projects before running tests"
      opt :detail, "display lots of detail"
      opt :verbose, "display progress"
      opt :omit_tests,"omit tests"
      opt :omit_rake,"omit running rake (builds graphics)"
      opt :testonly,"perform unit tests only, without generating commit"
    end

    Trollop::with_standard_exception_handling p do
      p.parse argv
    end
  end

  def run_unit_tests

    proj_main = File.join(@saved_directory,PROJECT_NAME)
    proj_test = proj_main + "Test"

    Dir.chdir(proj_test)

    runcmd("ant clean","...cleaning") if @options[:clean]

    attempt = 0

    repeat = true
    while repeat
      attempt += 1
      begin

        if DELETE_CRUNCH
          crunch_dir = "../#{PROJECT_NAME}/bin/res/crunch"
          if File.directory?(crunch_dir)
            puts "removing #{crunch_dir}" if @verbose
            remove_dir(crunch_dir)
          end
        end

        command = "ant debug install test"
        puts "Retrying command '#{command}', attempt #{attempt}" if attempt > 1
        output,_ = runcmd(command,"...building, installing, and testing")

        # If we made it without an exception, stop repeating
        repeat = false

      rescue ProgramException => e
        if DELETE_CRUNCH
          if e.message.include?('invalid resource directory name') && attempt < 4
            e = nil
          end
        end
        raise e unless e.nil?
      end
    end

    Dir.chdir(@saved_directory)

    if output.include?("FAILURES!!!")
      puts "\n\n\n-----------------------------------------"
      puts output
      puts "-----------------------------------------"
      raise ProgramException,"Problem performing unit tests"
    end
  end

  def runcmd(cmd,message=nil)
    filt_message = message || "no message given"
    if !@verbose
      echo filt_message if message
    else
      echo(sprintf("%-40s (%s)",filt_message,cmd))
    end
    output,success = scall(cmd,false)
    if !success
      raise ProgramException,"Problem executing command: (#{filt_message}) #{cmd};\n#{output}"
    end
    if @detail
      puts output
      puts
    end
    [output,success]
  end

  def echo(msg)
    puts msg
  end

  def remove(file)
    FileUtils.rm(file) if File.exist?(file)
  end

  def remove_dir(dir)
    FileUtils.rm_rf(dir) if File.directory?(dir)
  end

end

if __FILE__ == $0
  Commit.new.run(ARGV)
end
