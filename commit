#!/usr/bin/env ruby

require 'js_base'
require 'trollop'
require 'js_base/text_editor'

class ProgramException < Exception; end

class Commit

  ANDROID_PROJECTS = "RBuddyApp"
  GIT_STATE_FILENAME = ".commit_state"
  GIT_MESSAGE_FILENAME = ".commit_git_message"
  COMMIT_MESSAGE_FILENAME = ".commit_editor_message"
  PREVIOUS_COMMIT_MESSAGE_FILENAME = ".commit_previous_editor_message"


  COMMIT_MESSAGE_TEMPLATE_1=<<-EOS
Issue #

# Enter a commit message above, including at least one issue number prefixed with '#'.
# You can have GitHub close the issue automatically by referring to the issue with
# one of these (case-insensitive) forms:
#
#  'fixes #123', 'resolves #123', 'closes #123'.
#
  EOS

  COMMIT_MESSAGE_TEMPLATE_2=<<-EOS

# --------------------------------------------------------------------------
# Previous commit's message:
# --------------------------------------------------------------------------
  EOS


  COMMIT_MESSAGE_TEMPLATE_3=<<-EOS

# --------------------------------------------------------------------------
# Git repository status:
# --------------------------------------------------------------------------
  EOS

  def initialize
    @options = nil
  end

  def run(argv)

    @options = parse_arguments(argv)
    @detail = @options[:detail]
    @verbose = @options[:verbose] || @detail
    @current_git_state = nil
    @previous_git_state = nil
    @saved_directory = Dir.pwd

    begin

      read_old_git_state
      determine_current_git_state

      passed_tests = false

      perform_tests = false

      if @current_git_state != @previous_git_state
        puts "...states differ, running unit tests" if @verbose
        perform_tests = true
      end

      perform_tests ||= @options[:testonly]

      if perform_tests

        run_java_tests if @options[:java]
        run_android_tests if @options[:android]

        # Only update the state if it passed all tests
        update_old_git_state
        passed_tests = true

        update_old_git_state
      else
        passed_tests = true
      end

      if !@options[:testonly] && commit_required
        perform_commit
      end

    rescue ProgramException => e
      puts "*** Aborted!  #{e.message}"
      exit 1
    ensure
      Dir.chdir(@saved_directory)
    end
  end

  def commit_required
    return !(@current_git_state.empty?)
  end

  def read_old_git_state
    if @options[:clean]
      remove(GIT_STATE_FILENAME)
    end
    @previous_git_state = FileUtils.read_text_file(GIT_STATE_FILENAME,"")
  end

  def determine_current_git_state

    # Use full diff to determine if previous results are still valid
    current_diff_state,_ = scall("git diff -p")

    # Use brief status to test for untracked files and to report to user
    state,_= scall("git status -s")

    @current_git_state = state + "\n" + current_diff_state

    if state.include?('??')
      state,_ = scall("git status")
      raise ProgramException,"Unexpected repository state:\n#{state}"
    end
  end

  def update_old_git_state
    FileUtils.write_text_file(GIT_STATE_FILENAME,@current_git_state)
  end


  def strip_comments_from_string(m)
    m = m.strip
    lines = m.split("\n").collect{|x| x.rstrip}
    lines = lines.keep_if{|x| !x.start_with?('#')}
    lines.join("\n")
  end

  def convert_string_to_comments(s)
    s.split("\n").collect{|x| "# #{x}"}.join("\n") + "\n"
  end

  def previous_commit_message
    return nil if !File.exist?(PREVIOUS_COMMIT_MESSAGE_FILENAME)
    s = FileUtils.read_text_file(PREVIOUS_COMMIT_MESSAGE_FILENAME,"")
    strip_comments_from_string(s)
  end

  def edit_commit_message
    if !File.exist?(COMMIT_MESSAGE_FILENAME)
      status,_ = scall("git status")
      status = convert_string_to_comments(status)
      prior_msg = previous_commit_message
      content = COMMIT_MESSAGE_TEMPLATE_1
      if prior_msg
        content += COMMIT_MESSAGE_TEMPLATE_2 + convert_string_to_comments(prior_msg)
      end
      content += COMMIT_MESSAGE_TEMPLATE_3 + status
      FileUtils.write_text_file(COMMIT_MESSAGE_FILENAME,content)
    end

    TextEditor.new(COMMIT_MESSAGE_FILENAME).edit

    m = FileUtils.read_text_file(COMMIT_MESSAGE_FILENAME)
    m = strip_comments_from_string(m)
    return nil if m.empty?
    m
  end


  def perform_commit
    m = edit_commit_message
    raise(ProgramException,"Commit message empty") if !m

    if !(m =~ /#\d+/)
      raise(ProgramException,"No issue numbers found in commit message")
    end

    FileUtils.write_text_file(GIT_MESSAGE_FILENAME,m)

    if system("git commit -a --file=#{GIT_MESSAGE_FILENAME}")
      remove(COMMIT_MESSAGE_FILENAME)
      remove(GIT_MESSAGE_FILENAME)
      remove(GIT_STATE_FILENAME)

      bare_message = strip_comments_from_string(m)
      FileUtils.write_text_file(PREVIOUS_COMMIT_MESSAGE_FILENAME,bare_message)

    else
      raise(ProgramException,"Git commit failed; error #{$?}")
    end
  end

  def parse_arguments(argv)
    p = Trollop::Parser.new do
      banner <<-EOS
      Runs unit tests, generates commit for RBuddy project
      EOS
      opt :clean, "clean projects before running tests"
      opt :detail, "display lots of detail"
      opt :verbose, "display progress"
      opt :java,   "include Java projects", :default=>true
      opt :android,"include Android projects",:default=>true
      opt :testonly,"perform unit tests only, without generating commit"
    end

    Trollop::with_standard_exception_handling p do
      p.parse argv
    end
  end

  def run_android_tests

    # This seems to help with the Eclipse ADT / android cmd line conflict.
    #
    remove_dir("../adt/sdk/extras/google/google_play_services/libproject/google-play-services_lib/bin/res/crunch")
    remove_dir("RBuddyApp/bin/res/crunch")
    remove_dir("RBuddyAppTest/bin/res/crunch")

    ANDROID_PROJECTS.split.each do |project_root|
      proj_main = File.join(@saved_directory,project_root)
      proj_test = proj_main + "Test"
      echo "...Android project: #{project_root}"

      Dir.chdir(proj_test)

      runcmd("ant clean","...cleaning") if @options[:clean]
      runcmd("ant debug","...building")
      runcmd("ant debug install","...installing")
      runcmd("ant test","...testing")

      Dir.chdir(@saved_directory)
    end
  end

  def run_java_tests
    runcmd("ant test_all_projects","...running Java project tests")
  end

  def runcmd(cmd,message)
    if !@verbose
      echo message
    else
      echo(sprintf("%-40s (%s)",message,cmd))
    end
    output,success = scall(cmd,false)
    if @detail || !success
      puts output
      puts
    end
    if !success
      s = cmd
      if message
        s = "(#{message}) #{s}"
        raise ProgramException,"Problem executing command: #{s}"
      end
    end
    [output,success]
  end

  def echo(msg)
    puts msg
  end

  def remove(file)
    FileUtils.rm(file) if File.exist?(file)
  end

  def remove_dir(dir)
    FileUtils.rm_rf(dir) if File.directory?(dir)
  end

end


if __FILE__ == $0
  Commit.new.run(ARGV)
end
