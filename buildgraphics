#!/usr/bin/env ruby

require 'js_base'
require 'trollop'

class ProgramException < Exception; end

class Program


  def initialize
    @options = nil
  end


  def run(argv)

    @options = parse_arguments(argv)
    @verbose = @options[:verbose] || @detail

    begin
      @saved_directory = Dir.pwd
      Dir.chdir("GeometryApp")
      process_dir('graphics','.')
    rescue ProgramException => e
      puts "*** Aborted!  #{e.message}"
      exit 1
    ensure
      Dir.chdir(@saved_directory)
    end
  end


  def process_dir(source_dir, output_dir)
    puts "Processing source directory #{source_dir}" if @verbose
    if !File.directory?(output_dir)
      puts "attempting to make #{output_dir}"
      Dir.mkdir(output_dir)
    end

    FileUtils.directory_entries(source_dir).each do |ent|
      path = File.join(source_dir,ent)
      if (File.directory?(path))
        process_dir(path,File.join(output_dir,ent))
        next
      end
      next if !ent.end_with?('.xcf')

      source = File.join(source_dir,ent)
      output = FileUtils.change_extension(File.join(output_dir,ent),'png')
      puts "Processing source file #{source}" if @verbose

      next if (File.exist?(output) && File.mtime(source) <= File.mtime(output))
      convert_image(source,output)
    end
  end


  def convert_image(source,output)
    # Remove any existing output
    if File.exist?(output)
      File.delete(output)
    end

    runcmd("convert #{source} #{output}","Generating #{output}")

    if !File.exist?(output)
      raise ProgramException,"Failed to convert\n #{source}\n to\n #{output}\n ...it may have generated multiple layers"
    end
  end


  def parse_arguments(argv)
    p = Trollop::Parser.new do
      banner <<-EOS
      Converts GIMP images (.xcf) within 'graphics' folder to .png images
      within 'res' folder
      EOS
      opt :verbose, "display progress"
    end

    Trollop::with_standard_exception_handling p do
      p.parse argv
    end
  end


  def runcmd(cmd,message)
    if !@verbose
      echo message
    else
      echo(sprintf("%-40s (%s)",message,cmd))
    end
    output,success = scall(cmd,false)
    if @detail || !success
      puts output
      puts
    end
    if !success
      s = cmd
      if message
        s = "(#{message}) #{s}"
        raise ProgramException,"Problem executing command: #{s}"
      end
    end
    [output,success]
  end


  def echo(msg)
    puts msg
  end

end

if __FILE__ == $0
  Program.new.run(ARGV)
end
